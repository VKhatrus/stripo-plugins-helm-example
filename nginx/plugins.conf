server {
    listen              80;
    server_name         plugins.{{ public_domain }};
    return 301          https://$host$request_uri;
}


server {
    listen              443 ssl;
    server_name         plugins.{{ public_domain }};
    ssl_certificate     /etc/nginx/ssl/{{ public_domain }}/{{ public_domain }}.crt;
    ssl_certificate_key /etc/nginx/ssl/{{ public_domain }}/{{ public_domain }}.key;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    real_ip_header X-Forwarded-For;
    set_real_ip_from 0.0.0.0/0;

    error_log  /var/log/nginx/plugins_error.log ;
    access_log  /var/log/nginx/plugins_access.log ;

    server_tokens off;
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    ssl_prefer_server_ciphers on;
    autoindex off;
    
    location ~ (actuator) {
       return 403;
    }

    set $auth $http_authorization;
    if  ($cookie_token != "") {
    set $auth "Bearer $cookie_token";
    }
    proxy_set_header Authorization "$auth";


    error_page 404 500 502 503 504 /index.html;
        location = /index.html {
        alias /usr/share/nginx/html/custom_50x.html;
        internal;
    }

    location = /custom_50x.html {
        root /usr/share/nginx/html;
        internal;
    }

    location = /cluster.html {
        proxy_pass              http://{{ emple-loadbalancer-ingress }}/cluster.html;
        proxy_set_header Host   {{ emple-loadbalancer-ingress }};
    }

    location /proxy {
        proxy_pass              http://{{ emple-loadbalancer-ingress }}/stripo-plugin-proxy-service;
        proxy_set_header        Host  {{ emple-loadbalancer-ingress }};
        proxy_redirect off;
    }

    location / {
            proxy_pass              http://{{ emple-loadbalancer-ingress }}/stripo-plugin-api-gateway/;
            proxy_set_header        X-NginX-Proxy true;
            proxy_set_header        Host  {{ emple-loadbalancer-ingress }};
            proxy_set_header        X-Real-IP  $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto http;
            proxy_set_header        Authorization "$auth";
            proxy_redirect          default;
            proxy_redirect          http://$host/ https://$host/;
            proxy_redirect          http://hostname/ https://$host/;
            proxy_read_timeout      60s;
            proxy_connect_timeout   60s;
            error_page 404 /custom_50x.html;
            proxy_intercept_errors on;
    }

    location /content/ {
        add_header 'Access-Control-Allow-Origin' '*';
        proxy_pass  http://{{ S3_BUCKET_URI }}/;
        proxy_redirect off;
    }

    location /static/latest {
            proxy_pass              http://{{ emple-loadbalancer-ingress }}/static/;
            proxy_set_header        X-NginX-Proxy true;
            proxy_set_header        Host  {{ emple-loadbalancer-ingress }};
            proxy_set_header        X-Real-IP  $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto http;
            proxy_set_header        Authorization "$auth";
            proxy_redirect          default;
            proxy_read_timeout      60s;
            proxy_connect_timeout   60s;
    }

    location /static/rev {
            proxy_pass              http://{{ emple-loadbalancer-ingress }}/static/;
            proxy_set_header        X-NginX-Proxy true;
            proxy_set_header        Host  {{ emple-loadbalancer-ingress }};
            proxy_set_header        X-Real-IP  $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto http;
            proxy_set_header        Authorization "$auth";
            proxy_redirect          default;
            proxy_read_timeout      60s;
            proxy_connect_timeout   60s;
    }

    location /robots.txt {
        allow       all;
        access_log  off;
        return 200  "User-agent: *
        Disallow: /
        ";
    }
}
